apiVersion: apps/v1beta2
kind: StatefulSet
metadata:
  labels:
    app: {{ template "postgresql-replicaset.name" . }}
    chart: {{ .Chart.Name }}-{{ .Chart.Version }}
    heritage: {{ .Release.Service }}
    release: {{ .Release.Name }}
  name: {{ template "postgresql-replicaset.fullname" . }}
spec:
  serviceName: {{ template "postgresql-replicaset.fullname" . }}
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "postgresql-replicaset.name" . }}
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        app: {{ template "postgresql-replicaset.name" . }}
        release: {{ .Release.Name }}
        name: {{ template "postgresql-replicaset.fullname" . }}-replica
      annotations:
      {{- if .Values.podAnnotations }}
{{ toYaml .Values.podAnnotations | indent 8 }}
      {{- end }}
    spec:
      serviceAccount: {{.Values.serviceAccount.name}}
      securityContext:
        fsGroup: 26
      containers:
      - name: {{ template "postgresql-replicaset.fullname" . }}
        image: {{.Values.image.name}}:{{.Values.image.tag}}
        imagePullPolicy: {{.Values.image.pullPolicy}}
        ports:
        - containerPort: {{.Values.container.port}}
          name: postgres
        resources:
{{ toYaml .Values.resources | indent 12 }}
        env:
        - name: PG_MASTER_USER
          value: "{{.Values.masterUser}}"
        - name: PGHOST
          value: "/tmp"
        - name: PG_MODE
          value: set
        - name: PG_MASTER_HOST
          value: "{{ template "postgresql-replicaset.fullname" . }}-master"
        - name: PG_MASTER_PORT
          value: "{{.Values.container.port}}"
        - name: PG_MASTER_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql-replicaset.fullname" . }}
              key: masterPassword
        - name: PG_USER
          value: "{{.Values.user}}"
        - name: PG_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql-replicaset.fullname" . }}
              key: password
        - name: PG_DATABASE
          value: "{{.Values.databaseName}}"
        - name: PG_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: {{ template "postgresql-replicaset.fullname" . }}
              key: rootPassword
        volumeMounts:
        - name: pgdata
          mountPath: "/pgdata"
          readOnly: false
{{- if .Values.persistentVolume.enabled }}
  volumeClaimTemplates:
    - metadata:
        name: pgdata
        annotations:
        {{- range $key, $value := .Values.persistentVolume.annotations }}
          {{ $key }}: {{ $value }}
        {{- end }}
      spec:
        accessModes:
        {{- range .Values.persistentVolume.accessModes }}
          - {{ . | quote }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentVolume.size | quote }}
      {{- if .Values.persistentVolume.storageClass }}
      {{- if (eq "-" .Values.persistentVolume.storageClass) }}
        storageClassName: ""
      {{- else }}
        storageClassName: {{ .Values.persistentVolume.storageClass }}
      {{- end }}
      {{- end }}
{{- else }}
        - name: pgdata
          emptyDir: {}
{{- end }}
